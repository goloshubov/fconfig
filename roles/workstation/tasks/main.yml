---

#-----------------------------------------.dotfiles, configs---------------------------
- name: get dotfiles
  git:
    repo: "{{ files_repo }}"
    dest: "{{ files_dir }}"
    force: yes
    accept_hostkey: yes
  tags: [dofiles, configs]

- name: sync home files
  ignore_errors: yes
  synchronize:
    src: "{{ files_dir }}/{{ item }}/home/"
    dest: ~/
  loop:
    - "all"
    - "byHostname/{{ ansible_facts['hostname'] }}"
  tags: [dofiles, configs]

- name: sync etc files
  ignore_errors: yes
  become: true
  synchronize:
    src: "{{ files_dir }}/{{ item }}/etc/"
    dest: /etc/
    owner: no
    group: no
  loop:
    - "all"
    - "byHostname/{{ ansible_facts['hostname'] }}"
  tags: [dofiles, configs]


#---------------------------------packages--------------------------------------------
- name: enable copr repos
  become: true
  command: dnf copr enable '{{ item }}' -y
  loop:  "{{ copr_list }}"
  tags: [ software, package-repos ]

- name: install other repos
  become: yes
  command: dnf config-manager --add-repo '{{ item }}' -y
  loop: "{{ other_repos_list }}"
  tags: [ software, package-repos ]

- name: install packages (direct link)
  become: true
#  package:
  dnf:
    state: latest
    name: "{{ direct_package_list }}"
  tags: [ software, package-repos, packages ]

- name: install prerequisite packages (repos)
  become: true
#  package:
  dnf:
    state: latest
    name: "{{ prerequisite_packages_list }}"
  tags: [ software, package-repos, packages ]

- name: enable repos
  become: yes
  command: dnf config-manager --set-enabled "{{ item }}"
  loop: "{{ setenabled_repo_list }}"
  tags: [ software, package-repos ]

- name: install packages
  become: true
#  package:
  dnf:
    state: latest
    name: "{{ package_list }}"
  tags: [ software, packages ]


#---------------------------------misc--------------------------------------------
- name: add user to group
  become: yes
  command: usermod -a -G '{{ item }}'  '{{ansible_user}}'
  loop: "{{ user_groups }}"
  tags: configs


#---------------------------------flatpaks--------------------------------------------
# overwrites existing flathub remote, with no filter.
- name: add flathub remote (flatpak)
  become: yes
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrep
  tags: [software, flatpak-repos ]
#- name: add flathub remote (flatpak)
#  become: yes
#  flatpak_remote:
#    name: flathub
#    state: present
#    flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

- name: install flatpaks
  flatpak:
    name: '{{ item }}'
    state: present
    remote: flathub
  tags: [software, flatpaks ]
#    method: user
  loop: "{{ flatpak_list }}"



#---------------------------------pypi--------------------------------------------
- name: Install pip packages
  pip:
    name: "{{ pip_list }}"
  tags: [ software, pypi, pip ]



#---------------------------------cargo--------------------------------------------
- name: install cargo packages
  command: cargo install '{{ item }}'
  loop: "{{ cargo_list }}"
  tags: [software, cargo ]



#---------------------------------go--------------------------------------------
- name: install go packages
  command: go install '{{ item }}'@latest
  loop: "{{ go_list }}"
  tags: [software, go ]


#--------------------------------ansible-galaxy----------------------------------
- name: install ansible-galaxy collections
  community.general.ansible_galaxy_install:
    type: collection
    name: '{{ item }}'
  loop: "{{ ansible_galaxy_collection_list }}"
  tags: [software, ansible]

#---------------------------------GNOME--------------------------------------------
- name: configure GNOME (dconf load dumps, 'all' dir)
  ignore_errors: yes
  command: dconf load -f '{{ item.key }}' < "{{ files_dir }}/all/home/dconf/{{ item.value }}"
  loop: "{{ lookup('ansible.builtin.dict', dconf_dumps) }}"
  tags: [ configs, gnome ]
- name: configure GNOME (dconf load dumps, 'byHostname' dir)
  ignore_errors: yes
  command: dconf load -f '{{ item.key }}' < "{{ files_dir }}/byHostname/{{ ansible_facts['hostname']}}/home/dconf/{{ item.value }}"
  loop: "{{ lookup('ansible.builtin.dict', dconf_dumps) }}"
  tags: [ configs, gnome ]

- name: configure GNOME (dconf)
  dconf:
    key: '{{ item.key }}'
    value: '{{ item.value }}'    
  loop: "{{ lookup('ansible.builtin.dict', dconf_settings) }}"
  tags: [ configs, gnome ]


...
