---

#-----------------------------------------.dotfiles, configs---------------------------
- name: get dotfiles
  git:
    repo: "{{ files_repo }}"
    dest: "{{ files_dir }}"
    force: yes
    accept_hostkey: yes
  tags: [dotfiles, configs]

# all/home dir
- name: check home dir (all) 
  ansible.builtin.stat:
    path: "{{ files_dir }}/all/home/"
  register: all_homedir
  tags: [dotfiles, configs]
- name: sync home dir (all)
  synchronize:
    src: "{{ files_dir }}/all/home/"
    dest: ~/
  when: all_homedir.stat.islnk is defined
  tags: [dotfiles, configs]

# byHostname/<hostname>/home dir
- name: check home dir (byHostname) 
  ansible.builtin.stat:
    path: "{{ files_dir }}/byHostname/{{ ansible_facts['hostname'] }}/home/"
  register: host_homedir
  tags: [dotfiles, configs]
- name: sync home dir (byHostname)
  synchronize:
    src: "{{ files_dir }}/byHostname/{{ ansible_facts['hostname'] }}/home/"
    dest: ~/
  when: host_homedir.stat.islnk is defined
  tags: [dotfiles, configs]

# all/etc dir
- name: check etc dir (all)
  ansible.builtin.stat:
    path: "{{ files_dir }}/all/etc/"
  register: all_etcdir
  tags: [dotfiles, configs]
- name: sync etc dir (all)
  become: true
  synchronize:
    src: "{{ files_dir }}/all/etc/"
    dest: /etc/
    owner: false
    group: false
  when: all_etcdir.stat.islnk is defined
  tags: [dotfiles, configs]

# byHostname/<hostname>/etc dir
- name: check etc dir (byHostname)
  ansible.builtin.stat:
    path: "{{ files_dir }}/byHostname/{{ ansible_facts['hostname'] }}/etc/"
  register: host_etcdir
  tags: [dotfiles, configs]
- name: sync etc dir (byHostname)
  become: true
  synchronize:
    src: "{{ files_dir }}/byHostname/{{ ansible_facts['hostname'] }}/etc/"
    dest: /etc/
    owner: false
    group: false
  when: host_etcdir.stat.islnk is defined
  tags: [dotfiles, configs]


#---------------------------------packages--------------------------------------------
- name: enable copr repos
  become: true
  command: dnf copr enable '{{ item }}' -y
  loop:  "{{ copr_list }}"
  tags: [ software, package-repos ]

- name: install other repos
  become: yes
  command: dnf config-manager --add-repo '{{ item }}' -y
  loop: "{{ other_repos_list }}"
  tags: [ software, package-repos ]

- name: install packages (direct link)
  become: true
#  package:
  dnf:
    state: latest
    name: "{{ direct_package_list }}"
  tags: [ software, package-repos, packages ]

- name: install prerequisite packages (repos)
  become: true
#  package:
  dnf:
    state: latest
    name: "{{ prerequisite_packages_list }}"
  tags: [ software, package-repos, packages ]

- name: enable repos
  become: yes
  command: dnf config-manager --set-enabled "{{ item }}"
  loop: "{{ setenabled_repo_list }}"
  tags: [ software, package-repos ]

- name: install packages
  become: true
#  package:
  dnf:
    state: latest
    name: "{{ package_list }}"
  tags: [ software, packages ]

# ----- repo_tweaks -----
- name: repo_tweaks. delete mutally excluesive value (metalink|baseurl)
  become: yes
  community.general.ini_file:
    path: '{{ item.path }}'
    section: '{{ item.section }}'
    option: '{{ ( item.option == "baseurl" ) | ternary("metalink", "baseurl") }}'
    state: absent
    backup: true
  when: (item.option == "metalink" or item.option == "baseurl") and 
         item.value != "{{ lookup('ansible.builtin.ini', item.option, section=item.section, file=item.path) }}"
  loop: "{{ repo_tweaks }}"
  tags: [ software, packages, repo_tweaks ]
- name: repo_tweaks. set new value
  become: yes
  community.general.ini_file:
    path: '{{ item.path }}'
    section: '{{ item.section }}'
    option: '{{ item.option }}'
    value: '{{ item.value }}'
    backup: true
  when: item.value != "{{ lookup('ansible.builtin.ini', item.option, section=item.section, file=item.path) }}"
  loop: "{{ repo_tweaks }}"
  tags: [ software, packages, repo_tweaks ]


#---------------------------------misc--------------------------------------------
- name: add user to group
  become: yes
  command: usermod -a -G '{{ item }}'  '{{ansible_user}}'
  loop: "{{ user_groups }}"
  tags: configs


#---------------------------------flatpaks--------------------------------------------
# overwrites existing flathub remote, with no filter.
- name: add flathub remote (flatpak)
  become: yes
  command: flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrep
  tags: [software, flatpak-repos ]
#- name: add flathub remote (flatpak)
#  become: yes
#  flatpak_remote:
#    name: flathub
#    state: present
#    flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo

- name: install flatpaks
  flatpak:
    name: '{{ item }}'
    state: present
    remote: flathub
  tags: [software, flatpaks ]
#    method: user
  loop: "{{ flatpak_list }}"


#---------------------------------pypi--------------------------------------------
- name: Install pip packages
  pip:
    name: "{{ pip_list }}"
  tags: [ software, pypi, pip ]


#---------------------------------cargo--------------------------------------------
- name: install cargo packages
  command: cargo install '{{ item }}'
  loop: "{{ cargo_list }}"
  tags: [software, cargo ]


#---------------------------------go--------------------------------------------
- name: install go packages
  command: go install '{{ item }}'@latest
  loop: "{{ go_list }}"
  tags: [software, go ]


#--------------------------------ansible-galaxy----------------------------------
- name: install ansible-galaxy collections
  community.general.ansible_galaxy_install:
    type: collection
    name: '{{ item }}'
  loop: "{{ ansible_galaxy_collection_list }}"
  tags: [software, ansible]


#---------------------------------GNOME--------------------------------------------
# load dconf dump files first, if any
- name: find dconf dump files in 'all' dir
  ansible.builtin.find:
    paths: "{{ files_dir }}/all/dconf/"
    file_type: file
  register: all_dconfdumps
  tags: [ configs, gnome ]
- name: configure GNOME. Load dconf dumps, 'all' dir
  shell: "dconf load -f  /{{ item.path | basename | regex_replace('__','/') }}/ <  {{ files_dir}}/all/dconf/{{ item.path | basename }}" 
  loop: "{{ all_dconfdumps.files }}"
  tags: [ configs, gnome ]
- name: find dconf dump files in 'byHostname' dir
  ansible.builtin.find:
    paths: "{{ files_dir }}/byHostname/{{ ansible_facts['hostname'] }}/dconf/"
    file_type: file
  register: host_dconfdumps
  tags: [ configs, gnome ]
- name: configure GNOME. Load dconf dumps, 'byHostname' dir
  shell: "dconf load -f  /{{ item.path | basename | regex_replace('__','/') }}/ <  {{ files_dir}}/byHostname/{{ ansible_facts['hostname'] }}/dconf/{{ item.path | basename }}" 
  loop: "{{ host_dconfdumps.files }}"
  tags: [ configs, gnome ]

- name: configure GNOME (dconf, inventory keys,values)
  dconf:
    key: '{{ item.key }}'
    value: '{{ item.value }}'    
  loop: "{{ lookup('ansible.builtin.dict', dconf_settings) }}"
  tags: [ configs, gnome ]


...
